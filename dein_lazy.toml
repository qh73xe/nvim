# ===========================================
# .config/nvim/dein_lazy.toml
# ===========================================
#
# 遅延読み込み系プラグイン管理
#

# ===========================================
# ユーティリティ
# ===========================================
[[plugins]] # ft の動的変更
repo = 'osyo-manga/vim-precious'
on_ft = ['toml', 'md', 'html', 'md', 'rst']
depends = ['context_filetype.vim']

# [[plugins]]  # Terminal
# repo = 'kassio/neoterm'
# if = "has('nvim')"
# hook_add = '''
#   nnoremap <silent> ,rc :TREPLSendFile<cr>
#   nnoremap <silent> ,rl :TREPLSendLine<cr>
#   vnoremap <silent> ,rl :TREPLSendSelection<cr>
#   nnoremap <Space>@ :Ttoggle<CR>
#   nnoremap <buffer> <Space>@ :T ipython<CR>
# '''

[[plugins]] # 範囲検索
repo = 'osyo-manga/vim-operator-search'
depends = ['vim-operator-user', 'vim-textobj-function', 'vim-textobj-user']
hook_add = '''
  nmap <Space>/ <Plug>(operator-search)if
'''


# ===========================================
# 開発支援
# ===========================================
[[plugins]] # シンタッスクチェッカー
repo = 'w0rp/ale'
on_event = 'VimEnter'
hook_add = '''
  " 行強調
  let g:ale_completion_enabled = 1
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = 'EE'
  let g:ale_sign_warning = 'WW'
  highlight link ALEErrorSign airline_error_red
  highlight link ALEWarningSign PmenuSel

  " ファイルセーブ時にのみ Lint を走らせる.
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_enter = 0
  let g:ale_fix_on_save = 1

  " エラーメッセージリスト
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1
  let g:ale_open_list = 1
  let g:ale_list_window_size = 5

  " エラーメッセージフォーマット
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%]%code: %%s'

  let g:ale_linters = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'javascript': ['eslint'],
  \   'typescript': ['tslint'],
  \   'vue': ['eslint'],
  \   'python': ['flake8', 'mypy', 'pycodestyle'],
  \   'html': ['prettier'],
  \   'yaml': ['yamllint'],
  \   'json': ['jq'],
  \   'sh': ['shellcheck'],
  \   'css': ['stylelint'],
  \   'sass': ['sasslint'],
  \   'rst': ['rstcheck'],
  \}
  let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'python': ['yapf', 'isort'],
  \   'json': ['jq'],
  \   'javascript': ['prettier'],
  \   'typescript': ['prettier'],
  \   'html': ['prettier'],
  \   'css': ['prettier'],
  \   'sass': ['prettier'],
  \   'less': ['prettier'],
  \   'jsx': ['prettier'],
  \   'vue': ['prettier'],
  \   'md': ['prettier'],
  \   'yaml': ['prettier'],
  \}

  " lint 対応
  let g:airline#extensions#ale#enabled = 1
  let g:airline#extensions#ale#open_lnum_symbol = '('
  let g:airline#extensions#ale#close_lnum_symbol = ')'

  " KeyMAP
  nmap <silent><C-k> <Plug>(ale_previous_wrap)
  nmap <silent><C-j> <Plug>(ale_next_wrap)
'''


[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = 'FileType'  # filetype が特定された時に読み込む
hook_add = '''
  let g:quickrun_config = {
  \   'tex': {
  \       'command': 'latexmk',
  \       'exec': ['%c -gg -pdfdvi %s', 'xdg-open %s:r.pdf']
  \   },
  \}
  let g:quickrun_no_default_key_mappings = 1
'''

# Python
# -------------------------------------------------------------
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_event = 'FileType'
on_ft = ['python']
hook_add = '''
  set completeopt-=preview
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_event = 'FileType'
on_ft = ['python']

[[plugins]]
repo = 'plytophogy/vim-virtualenv'
on_event = 'FileType'
on_ft = ['python']

[[plugins]]  # rst
repo = 'Rykka/riv.vim'
on_event = 'FileType'
on_ft = ['rst', 'python']

[[plugins]]  # rst
repo = 'vim-scripts/rest.vim'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['rst', 'python']

# HTML
# -------------------------------------------------------------
[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['html']
hook_add = '''
  let g:user_emmet_leader_key='<Space>e'
'''

# Praat
# -------------------------------------------------------------
[[plugins]]
repo = 'dopefishh/vim-praat'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['praat']


# Latex
# -------------------------------------------------------------
[[plugins]]
repo = 'lervag/vimtex'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['tex', 'latex']
hook_add = '''
  let g:tex_flavor = 'latex'
  let g:vimtex_view_method = 'mupdf'
  if has('nvim')
    let g:vimtex_compiler_progname = 'nvr'
  endif
'''

# Typescript
# -------------------------------------------------------------
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_event = 'FileType'
on_ft = ['javascript', 'typescript']

[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_event = 'FileType'
on_ft = ['javascript', 'typescript', 'html']
hook_add = '''
  let g:js_indent_typescript = 1
'''

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_event = 'FileType'
on_ft = ['javascript', 'typescript']
hook_add = '''
  let g:used_javascript_libs = 'jquery,angularjs,angularui,angularuirouter'
'''


[[plugins]]  # vue の補完
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
on_event = 'FileType'
hook_source = '''
    set hidden
    let g:LanguageClient_serverCommands = {
    \ 'vue': ['vls'],
    \ }
    " not stop completion $ & /
    setlocal iskeyword+=$
    setlocal iskeyword+=-
    nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
    nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''
