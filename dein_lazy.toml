# ===========================================
# .config/nvim/dein_lazy.toml
# ===========================================
#
# nvim のプラグインの内, 非同期読み込みを行うライブラリの設定を記述します.

# ====================================================
# LanguageClient
# ====================================================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'FileType'
depends = ['nvim-web-devicons']
lua_source = '''
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, { virtual_text = false }
)
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'mason-lspconfig.nvim'
lua_source = '''
require('mason').setup({
  ui = {
    icons = {
      package_installed = "✓",
      package_pending = "➜",
      package_uninstalled = "✗"
    }
  }
})
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
depends = ['nvim-lspconfig']
lua_source = '''
  local nvim_lsp = require('lspconfig')
  require("mason-lspconfig").setup({
    ensure_installed = {
      "denols",
      "lua_ls", -- lua
      "ts_ls", -- TypeScript
    },
    handlers = {
      function(server_name)
        local opts = {
          capabilities = require("ddc_source_lsp").make_client_capabilities(),
          on_attach = function(client, bufnr)
            local bufopts = { silent = true, buffer = bufnr }
            -- カーソル下の変数の情報の取得
            vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)

            -- 定義ジャンプ
            vim.keymap.set('n', '<C-n>', vim.lsp.buf.definition, bufopts)
            vim.keymap.set('n', '<C-N>', vim.lsp.buf.implementation, bufopts)

            -- 変数参照先の一覧を取得
            vim.keymap.set('n', '<leader>r', vim.lsp.buf.references, bufopts)

            -- Error/Warning/Hint の実行可能な修正の候補を表示
            vim.keymap.set('n', '<leader>h', vim.lsp.buf.code_action, bufopts)

            -- フォーマットの実施
            vim.keymap.set('n', '<leader><Enter>', vim.lsp.buf.format, bufopts)
          end
        }

        -- 特定のサーバーに対する設定を追加
        if server_name == "denols" then
          opts.filetypes = { 'ts' }
          opts.root_markwers = {
            'deno.json',
            'deno.jsonc',
            'deps.ts',
          }
          opts.workspace_required = true
        end
        if server_name == "ts_ls" then
          opt.root_markers = { 'package.json' }
          opts.workspace_required = true
        end
        nvim_lsp[server_name].setup(opts)
      end
    }
  })
'''

[[plugins]] # 型情報ヘルプ
repo = 'matsui54/denops-signature_help'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
let g:signature_help_config = {
\ contentsStyle: "full",
\ viewStyle: "floating"
\ }
call signature_help#enable()
'''

# ===================================================
# 開発支援
# ===================================================
[[plugins]] # シンタッスクチェッカー
repo = 'folke/trouble.nvim'
on_source = 'nvim-lspconfig'
depends = ['nvim-web-devicons']
lua_source = '''
  require("trouble").setup {
    position = "bottom", -- position of the list can be: bottom, top, left, right
    use_diagnostic_signs = true,
  }
  vim.keymap.set("n", "<leader><leader>", "<cmd>Trouble diagnostics toggle<cr>")
  vim.keymap.set("n", "Q", function() require("trouble").open() end)
'''

[[plugins]] # コードフォーマッター
repo = 'mhartington/formatter.nvim'
on_event = 'FileType'
lua_source = '''
require("formatter").setup {
  -- ロギングを有効または無効にする
  logging = false,
  filetype = {
    lua = {
      require("formatter.filetypes.lua").stylua
    },
    javascript = {
      require("formatter.filetypes.javascript").prettier
    },
    typescript = {
      function ()
        return {
          exe = "eslint",
          args = {
            "--stdin",
            "--stdin-filename",
            vim.api.nvim_buf_get_name(0),
            "--fix-to-stdout",
          },
          stdin = true,
          try_node_modules = true,
        }
      end,
      require("formatter.filetypes.typescript").prettier,
    },
    typescriptreact = {
      require("formatter.filetypes.typescriptreact").prettier
    },
    vue = {
      require("formatter.filetypes.vue").prettier
    },
    css = {
      require("formatter.filetypes.css").prettier
    },
    python = {
      require("formatter.filetypes.python").yapf,
      require("formatter.filetypes.python").isort
    },
    json = {
      require("formatter.filetypes.json").prettier
    },
    -- デフォルトフォーマッタ構成
    ["*"] = {
      require("formatter.filetypes.any").remove_trailing_whitespace
    }
  }
}
'''

[[plugins]] # LSP 用スニペット補完
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  let g:vsnip_filetypes = {}
'''

[[plugins]] # スニペット補完
repo = 'Shougo/neosnippet'
on_event = 'VimEnter'
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory=g:ECT_DIR . '/snipets/'
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]] # copilot
repo = 'github/copilot.vim'
on_event = 'VimEnter'

# ====================================================
# git
# ====================================================
[[plugins]] # git 支援
repo = 'lewis6991/gitsigns.nvim'
on_event = 'VimEnter'
lua_source = '''
require('gitsigns').setup {
  signs = {
    add          = { text = '➕' },
    change       = { text = '✨' },
    delete       = { text = '➖' },
    topdelete    = { text = '‾' },
    changedelete = { text = '🔥' },
    untracked    = { text = '┆' },
  },
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = true, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  watch_gitdir = {
    follow_files = true
  },
  attach_to_untracked = true,
  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
    delay = 1000,
    ignore_whitespace = false,
  },
  current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
  sign_priority = 6,
  update_debounce = 100,
  status_formatter = nil, -- Use default
  max_file_length = 40000, -- Disable if file is longer than this (in lines)
  preview_config = {
    -- Options passed to nvim_open_win
    border = 'single',
    style = 'minimal',
    relative = 'cursor',
    row = 0,
    col = 1
  },
  on_attach = function(bufnr)
    local gs = package.loaded.gitsigns
    local bufopts = { silent = true, buffer = bufnr }
    -- カーソル下の変数の情報の取得
    vim.keymap.set('n', '<leader>hb', function() gs.blame_line{full=false} end, bufopts)
  end
}
'''
