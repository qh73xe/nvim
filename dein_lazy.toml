# ===========================================
# .config/nvim/dein_lazy.toml
# ===========================================
#
# 遅延読み込み系プラグイン管理
#

# ====================================================
# 編集支援
# ====================================================
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
  \ neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'Shougo/neosnippet'
on_event = 'VimEnter'
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory=g:ECT_DIR . '/snipets/'

  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

# ===================================================
# UI 制御
# ===================================================
[[plugins]]  # Indent 表示
repo = 'nathanaelkane/vim-indent-guides'
on_event = 'FileType'  # filetype が特定された時に読み込む
hook_source = '''
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
'''
hook_post_source = '''
  :hi IndentGuidesOdd  guibg=DarkGrey ctermbg=DarkGrey
  :hi IndentGuidesEven guibg=#73cef4 ctermbg=81
'''

[[plugins]] # Colour Shceme
repo = 'jacoborus/tender.vim'
on_event = 'FileType'
hook_source = '''
  colorscheme tender
'''

[[plugins]] # 全角強調
repo = 'thinca/vim-zenspace'
on_event = 'FileType'
hook_source = '''
  set list
  colorscheme tender
'''

[[plugins]]  # AIRLINE
repo = 'vim-airline/vim-airline'
on_event = 'VimEnter'
depends = ['vim-airline-themes']
hook_source = '''
  set laststatus=2
  let g:airline_powerline_fonts = 1

  " tab 設定
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
  nmap <C-p> <Plug>AirlineSelectPrevTab
  nmap <C-n> <Plug>AirlineSelectNextTab
'''

# ===================================================
# ユーティリティ
# ===================================================
[[plugins]] # im 制御
repo = 'fuenor/im_control.vim'
on_event = 'VimEnter'
hook_source = '''
  set timeout timeoutlen=3000 ttimeoutlen=100
  set formatoptions+=mM
  set spelllang=en,cjk
  let IM_CtrlMode = 1
  inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>
  function! IMCtrl(cmd)
    let cmd = a:cmd
    if cmd == 'On'
      if g:OS == "WSL"
        let res = system("zenhan.exe 1")
      elseif g:OS == "Darwin"
        let res = system("osascript -e 'tell application".'"System Events"'."to key code {104}'")

      else
        let res = system('ibus engine kkc')
      endif
    elseif cmd == 'Off'
      if g:OS == "WSL"
        let res = system("zenhan.exe 0")
      elseif g:OS == "Darwin"
        let res = system("osascript -e 'tell application".'"System Events"'."to key code {102}'")
      else
        let res = system('ibus engine xkb:us::eng')
      endif
    endif
    return ''
  endfunction
'''

[[plugins]] # ローマ字を利用した検索
repo = 'haya14busa/vim-migemo'
on_event = 'VimEnter'
hook_source = '''
  set incsearch
'''

[[plugins]] # ローマ字を利用した検索
repo = 'rhysd/migemo-search.vim'
on_event = 'VimEnter'
hook_post_source = '''
  set incsearch
  function! Migemo()
    if hasmapto('\<CR>','c')
        cunmap <expr><CR>
    else
        cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>"
    endif
  endfunction
'''


[[plugins]] # 範囲検索
repo = 'osyo-manga/vim-operator-search'
depends = ['vim-operator-user', 'vim-textobj-function', 'vim-textobj-user']
hook_post_source = '''
  nmap <Space>/ <Plug>(operator-search)if
'''


# ===================================================
# 開発支援
# ===================================================
[[plugins]] # シンタッスクチェッカー
repo = 'dense-analysis/ale'
on_event = 'VimEnter'
depends = ['vim-airline']
hook_source = '''
  let g:ale_linters_explicit = 1

  " 行強調
  let g:ale_completion_enabled = 1
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = 'EE'
  let g:ale_sign_warning = 'WW'
  highlight link ALEErrorSign airline_error_red
  highlight link ALEWarningSign PmenuSel

  " ファイルセーブ時にのみ Lint を走らせる.
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_enter = 0
  let g:ale_fix_on_save = 1

  " エラーメッセージリスト
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1
  let g:ale_open_list = 1
  let g:ale_list_window_size = 5

  " エラーメッセージフォーマット
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%]%code: %%s'
  let g:ale_linters = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'tex': ['chktex'],
  \   'javascript': ['eslint'],
  \   'typescript': ['eslint'],
  \   'typescriptreact': ['eslint'],
  \   'vue': ['eslint'],
  \   'ruby': ['rubocop'],
  \   'eruby': ['rubocop', 'prettier'],
  \   'python': ['flake8', 'mypy', 'pycodestyle'],
  \   'html': ['prettier'],
  \   'htmldjango': ['prettier'],
  \   'yaml': ['yamllint'],
  \   'json': ['jq'],
  \   'sh': ['shellcheck'],
  \   'css': ['stylelint'],
  \   'sass': ['sasslint'],
  \   'rst': [],
  \}
  let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'python': ['isort', 'yapf'],
  \   'json': ['jq'],
  \   'ruby': ['rubocop'],
  \   'eruby': ['prettier'],
  \   'html': ['prettier'],
  \   'css': ['prettier'],
  \   'sass': ['prettier'],
  \   'less': ['prettier'],
  \   'javascript': ['prettier', 'eslint'],
  \   'typescript': ['prettier', 'eslint'],
  \   'typescriptreact': ['prettier', 'eslint'],
  \   'jsx': ['prettier'],
  \   'vue': ['prettier', 'eslint'],
  \   'md': ['prettier'],
  \   'yaml': ['prettier'],
  \}
  let g:ale_eruby_prettier_options = '--parser html'

  " lint 対応
  let g:airline#extensions#ale#enabled = 1
  let g:airline#extensions#ale#open_lnum_symbol = '('
  let g:airline#extensions#ale#close_lnum_symbol = ')'

  " KeyMAP
  nmap <silent><C-k> <Plug>(ale_previous_wrap)
  nmap <silent><C-j> <Plug>(ale_next_wrap)
'''


[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = 'FileType'
on_ft = ['tex', 'latex']
hook_source = '''
  let g:quickrun_config = {
  \   'tex': {
  \       'command': 'latexmk',
  \       'exec': ['%c -gg -pdfdvi %s', 'xdg-open %s:r.pdf']
  \   },
  \}
  let g:quickrun_no_default_key_mappings = 1
'''

# --------------------------------------------------
# Python
# --------------------------------------------------
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_event = 'FileType'
on_ft = ['python']
hook_source = '''
  set completeopt-=preview
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_event = 'FileType'
on_ft = ['python']

[[plugins]]
repo = 'plytophogy/vim-virtualenv'
on_event = 'FileType'
on_ft = ['python']

# --------------------------------------------------
# Praat
# --------------------------------------------------
[[plugins]]
repo = 'dopefishh/vim-praat'
on_event = 'FileType'
on_ft = ['praat']


# --------------------------------------------------
# Latex
# --------------------------------------------------
[[plugins]]
repo = 'lervag/vimtex'
on_event = 'FileType'
on_ft = ['tex', 'latex']
hook_source = '''
  let g:tex_flavor = 'latex'
  let g:vimtex_view_method = 'mupdf'
  if has('nvim')
    let g:vimtex_compiler_progname = 'nvr'
  endif
'''


# --------------------------------------------------
# HTML
# --------------------------------------------------
[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'FileType'
on_ft = ['html']
hook_source = '''
  let g:user_emmet_leader_key='<Space>e'
'''

# --------------------------------------------------
# Typescript
# --------------------------------------------------
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_event = 'FileType'
on_ft = ['typescript']
hook_source = '''
  let g:typescript_indent_disable = 1
'''

[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_event = 'FileType'
on_ft = ['javascript', 'typescript', 'html']
hook_source = '''
  let g:js_indent_typescript = 1
'''

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_event = 'FileType'
on_ft = ['typescript']
hook_add = '''
  let g:used_javascript_libs = 'jquery,angularjs,angularui,angularuirouter'
'''

# --------------------------------------------------
# GO LANG
# --------------------------------------------------
[[plugins]]  # go
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  let g:go_fmt_command = "goimports"
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
on_ft = ['go']
build = 'bash install.sh'
rev = 'next'
hook_add = '''
  set hidden
  let g:LanguageClient_serverCommands = {
  \ 'go': ['gopls']
  \ }
  let g:LanguageClient_loadSettings = 1
  nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
'''
