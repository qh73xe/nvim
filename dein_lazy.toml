# ===========================================
# .config/nvim/dein_lazy.toml
# ===========================================
#
# nvim のプラグインの内, 非同期読み込みを行うライブラリの設定を記述します.

# ====================================================
# LanguageClient
# ====================================================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'FileType'
depends = ['nvim-web-devicons']
lua_source = '''
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, { virtual_text = false }
)
'''

[[plugins]]
repo ='williamboman/mason.nvim'
on_source = 'mason-lspconfig.nvim'
lua_source = '''
require('mason').setup({
  ui = {
    icons = {
      package_installed = "✓",
      package_pending = "➜",
      package_uninstalled = "✗"
    }
  }
})
'''

[[plugins]]
repo ='williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
depends = ['nvim-lspconfig']
lua_source = '''
  local nvim_lsp = require('lspconfig')
  require("mason-lspconfig").setup({
    ensure_installed = {
      "dockerls",
      "docker_compose_language_service",
      "dotls",
      "lua_ls",
      "marksman",
      "taplo", -- toml
      "yamlls",
      -- react, vue
      "eslint",
      "tsserver",
      "volar",
      -- "denols",
      "ltex", -- latex
      -- R, Matlab, python
      "wgsl_analyzer",
      "matlab_ls",
    },
  })
  require("mason-lspconfig").setup_handlers({
    function(server_name)
      local opts = {}

      if server_name == "tsserver" then
        local root_dir = nvim_lsp.util.root_pattern("App.vue")
        local is_vue_repo = root_dir(vim.api.nvim_buf_get_name(0)) ~= nil
        if not vue_pattern then
          return
        end
      end
      -- volar を読み込む際には tsserver 系統も全て利用する
      if server_name == "volar" then
          opts.filetypes = {
            'typescript',
            'javascript',
            'javascriptreact',
            'typescriptreact',
            'vue',
            'json'
          }
      end

      opts.on_attach = function(_, bufnr)
        local bufopts = { silent = true, buffer = bufnr }

        -- カーソル下の変数の情報の取得
        vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)

        -- 定義ジャンプ
        vim.keymap.set('n', '<C-n>', vim.lsp.buf.definition, bufopts)
        vim.keymap.set('n', '<C-N>', vim.lsp.buf.implementation, bufopts)

        -- 変数参照先の一覧を取得
        vim.keymap.set('n', '<leader>r', vim.lsp.buf.references, bufopts)

        -- Error/Warning/Hint の実行可能な修正の候補を表示
        vim.keymap.set('n', '<leader>h', vim.lsp.buf.code_action, bufopts)

        -- フォーマットの実施
        vim.keymap.set('n', '<leader><Enter>', vim.lsp.buf.format, bufopts)

      end
      nvim_lsp[server_name].setup(opts)
    end
  })
'''

[[plugins]] # 型情報ヘルプ
repo = 'matsui54/denops-signature_help'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
let g:signature_help_config = {
\ contentsStyle: "full",
\ viewStyle: "floating"
\ }
call signature_help#enable()
'''

# ===================================================
# 開発支援
# ===================================================
[[plugins]] # シンタッスクチェッカー
repo ='folke/trouble.nvim'
on_source = 'nvim-lspconfig'
depends = ['nvim-web-devicons']
lua_source = '''
  require("trouble").setup {
    use_diagnostic_signs = true
  }
  vim.keymap.set("n", "Q", function() require("trouble").open() end)
'''

[[plugins]] # コードフォーマッター
repo = 'mhartington/formatter.nvim'
on_event = 'FileType'
lua_source = '''
local util = require "formatter.util"
function format_prettier()
   return {
     exe = "npx",
     args = {"prettier", "--stdin-filepath", vim.api.nvim_buf_get_name(0)},
     stdin = true
   }
end
require("formatter").setup {
  -- ロギングを有効または無効にする
  logging = false,
  filetype = {
    lua = {
      require("formatter.filetypes.lua").stylua
    },
    javascript = {
      require("formatter.filetypes.javascript").prettier
    },
    typescript = { format_prettier },
    vue = {
      require("formatter.filetypes.vue").prettier
    },
    css = {
      require("formatter.filetypes.css").prettier
    },
    -- デフォルトフォーマッタ構成
    ["*"] = {
      require("formatter.filetypes.any").remove_trailing_whitespace
    }
  }
}
'''

[[plugins]] # LSP 用スニペット補完
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
'''

[[plugins]] # スニペット補完
repo = 'Shougo/neosnippet'
on_event = 'VimEnter'
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory=g:ECT_DIR . '/snipets/'
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]] # copilot
repo = 'github/copilot.vim'
on_event = 'FileType'  # filetype が特定された時に読み込む
