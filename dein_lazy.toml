# ===========================================
# .config/nvim/dein_lazy.toml
# ===========================================
#
# 遅延読み込み系プラグイン管理
#
[[plugins]]  # vim interface framework
depends = ['denops.vim']
repo = 'Shougo/ddu.vim'

# ====================================================
# 編集支援
# ====================================================
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
 call ddc#custom#patch_global('sources', ['around', 'nvim-lsp', 'neosnippet', 'vsnip', 'file'])
 call ddc#custom#patch_global('sourceOptions', {
 \   '_': {
 \     'matchers': ['matcher_head'],
 \     'sorters': ['sorter_rank'],
 \     'converters': ['converter_remove_overlap'],
 \   },
 \   'file': {
 \     'mark': 'F',
 \     'isVolatile': v:true,
 \     'forceCompletionPattern': '\S/\S*',
 \   },
 \   'around': {'mark': 'A'},
 \   'neosnippet': {'mark': 'S'},
 \   'nvim-lsp': {
 \     'mark': 'L',
 \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
 \   },
 \ })

 call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

 inoremap <silent><expr> <TAB>
      \ ddc#map#pum_visible() ? '<C-n>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#map#manual_complete()
 inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

 call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]] # 周辺単語補完ソース
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]] # ラングエッジサーバー補完
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]] # スニペット補完
repo = 'Shougo/neosnippet'
on_event = 'VimEnter'
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory=g:ECT_DIR . '/snipets/'
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
#
[[plugins]] # LSP 用スニペット補完
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
'''

[[plugins]] # ファイルパス補完
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'


# ====================================================
# LanguageClient
# ====================================================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
  lua << EOF
  local nvim_lsp = require('lspconfig')
  local on_attach = function (client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  local opts = { noremap=true, silent=true }
    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
    buf_set_keymap('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  end
EOF
'''

[[plugins]]
repo ='williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
require("mason-lspconfig").setup({
  ensure_installed = { "sumneko_lua", "rust_analyzer" }
})
EOF
'''


[[plugins]]
repo ='williamboman/mason.nvim'
depends = ['nvim-web-devicons', 'nvim-lspconfig']
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
require('mason').setup({
  ui = {
    icons = {
      package_installed = "✓",
      package_pending = "➜",
      package_uninstalled = "✗"
    }
  }
})
EOF
'''

[[plugins]]
repo ='folke/trouble.nvim'
on_source = 'nvim-lspconfig'
depends = ['nvim-web-devicons']
hook_source = '''
lua << EOF
  require("trouble").setup {
    position = "bottom", -- position of the list can be: bottom, top, left, right
    height = 10, -- height of the trouble list when position is top or bottom
    width = 50, -- width of the list when position is left or right
    icons = true, -- use devicons for filenames
    mode = "workspace_diagnostics", -- "workspace_diagnostics", "document_diagnostics", "quickfix", "lsp_references", "loclist"
    fold_open = "", -- icon used for open folds
    fold_closed = "", -- icon used for closed folds
    group = true, -- group results by file
    padding = true, -- add an extra new line on top of the list
    action_keys = { -- key mappings for actions in the trouble list
        -- map to {} to remove a mapping, for example:
        -- close = {},
        close = "q", -- close the list
        cancel = "<esc>", -- cancel the preview and get back to your last window / buffer / cursor
        refresh = "r", -- manually refresh
        jump = {"<cr>", "<tab>"}, -- jump to the diagnostic or open / close folds
        open_split = { "<c-x>" }, -- open buffer in new split
        open_vsplit = { "<c-v>" }, -- open buffer in new vsplit
        open_tab = { "<c-t>" }, -- open buffer in new tab
        jump_close = {"o"}, -- jump to the diagnostic and close the list
        toggle_mode = "m", -- toggle between "workspace" and "document" diagnostics mode
        toggle_preview = "P", -- toggle auto_preview
        hover = "K", -- opens a small popup with the full multiline message
        preview = "p", -- preview the diagnostic location
        close_folds = {"zM", "zm"}, -- close all folds
        open_folds = {"zR", "zr"}, -- open all folds
        toggle_fold = {"zA", "za"}, -- toggle fold of current file
        previous = "k", -- previous item
        next = "j" -- next item
    },
    indent_lines = true, -- add an indent guide below the fold icons
    auto_open = false, -- automatically open the list when you have diagnostics
    auto_close = false, -- automatically close the list when you have no diagnostics
    auto_preview = true, -- automatically preview the location of the diagnostic. <esc> to close preview and go back to last window
    auto_fold = false, -- automatically fold a file trouble list at creation
    auto_jump = {"lsp_definitions"}, -- for the given modes, automatically jump if there is only a single result
    signs = {
        -- icons / text used for a diagnostic
        error = "",
        warning = "",
        hint = "",
        information = "",
        other = "﫠"
    },
    use_diagnostic_signs = false -- enabling this will use the signs defined in your lsp client
  }
EOF
'''


[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

# ===================================================
# UI 制御
# ===================================================
[[plugins]]  # Indent 表示
repo = 'nathanaelkane/vim-indent-guides'
on_event = 'FileType'  # filetype が特定された時に読み込む
hook_source = '''
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
'''
hook_post_source = '''
  :hi IndentGuidesOdd  guibg=DarkGrey ctermbg=DarkGrey
  :hi IndentGuidesEven guibg=#73cef4 ctermbg=81
'''

[[plugins]] # Colour Shceme
repo = 'jacoborus/tender.vim'
on_event = 'FileType'
hook_source = '''
  colorscheme tender
'''

[[plugins]] # 全角強調
repo = 'thinca/vim-zenspace'
on_event = 'FileType'
hook_source = '''
  set list
  colorscheme tender
'''


[[plugins]]  # AIRLINE
repo = 'vim-airline/vim-airline'
on_event = 'VimEnter'
depends = ['vim-airline-themes']
hook_source = '''
  set laststatus=2
  let g:airline_powerline_fonts = 1

  " tab 設定
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
  nmap <C-p> <Plug>AirlineSelectPrevTab
  nmap <C-n> <Plug>AirlineSelectNextTab
'''

# ===================================================
# ユーティリティ
# ===================================================
[[plugins]] # im 制御
repo = 'fuenor/im_control.vim'
on_event = 'VimEnter'
hook_source = '''
  set timeout timeoutlen=3000 ttimeoutlen=100
  set formatoptions+=mM
  set spelllang=en,cjk
  let IM_CtrlMode = 1
  inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>
  function! IMCtrl(cmd)
    let cmd = a:cmd
    if cmd == 'On'
      if g:OS == "WSL"
        let res = system("zenhan.exe 1")
      elseif g:OS == "Darwin"
        let res = system("osascript -e 'tell application".'"System Events"'."to key code {104}'")

      else
        let res = system('ibus engine kkc')
      endif
    elseif cmd == 'Off'
      if g:OS == "WSL"
        let res = system("zenhan.exe 0")
      elseif g:OS == "Darwin"
        let res = system("osascript -e 'tell application".'"System Events"'."to key code {102}'")
      else
        let res = system('ibus engine xkb:us::eng')
      endif
    endif
    return ''
  endfunction
'''

[[plugins]] # ローマ字を利用した検索
repo = 'haya14busa/vim-migemo'
on_event = 'VimEnter'
hook_source = '''
  set incsearch
'''

[[plugins]] # ローマ字を利用した検索
repo = 'rhysd/migemo-search.vim'
on_event = 'VimEnter'
hook_post_source = '''
  set incsearch
  function! Migemo()
    if hasmapto('\<CR>','c')
        cunmap <expr><CR>
    else
        cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>"
    endif
  endfunction
'''


[[plugins]] # 範囲検索
repo = 'osyo-manga/vim-operator-search'
depends = ['vim-operator-user', 'vim-textobj-function', 'vim-textobj-user']
hook_post_source = '''
  nmap <Space>/ <Plug>(operator-search)if
'''

# ===================================================
# 開発支援
# ===================================================
[[plugins]] # シンタッスクチェッカー
repo = 'dense-analysis/ale'
on_event = 'VimEnter'
depends = ['vim-airline']
hook_source = '''
  let g:ale_linters_explicit = 1
  " nvim-lsp との競合防止
   let g:ale_disable_lsp = 1
  " 行強調
  let g:ale_completion_enabled = 1
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = 'EE'
  let g:ale_sign_warning = 'WW'
  highlight link ALEErrorSign airline_error_red
  highlight link ALEWarningSign PmenuSel

  " ファイルセーブ時にのみ Lint を走らせる.
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_enter = 0
  let g:ale_fix_on_save = 1

  " エラーメッセージリスト
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1
  let g:ale_open_list = 1
  let g:ale_list_window_size = 5

  " エラーメッセージフォーマット
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%]%code: %%s'
  let g:ale_linter_aliases = {'typescriptreact': 'typescript'}
  let g:ale_linters = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'tex': ['chktex'],
  \   'javascript': ['eslint'],
  \   'typescript': ['eslint'],
  \   'typescriptreact': ['eslint'],
  \   'vue': ['eslint'],
  \   'ruby': ['rubocop'],
  \   'eruby': ['rubocop', 'prettier'],
  \   'python': ['flake8', 'mypy', 'pycodestyle'],
  \   'html': ['prettier'],
  \   'htmldjango': ['prettier'],
  \   'json': ['jq'],
  \   'sh': ['shellcheck'],
  \   'css': ['stylelint'],
  \   'sass': ['sasslint'],
  \   'rst': [],
  \}
  let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'python': ['isort', 'yapf'],
  \   'json': ['jq'],
  \   'ruby': ['rubocop'],
  \   'eruby': ['prettier'],
  \   'html': ['prettier'],
  \   'css': ['prettier'],
  \   'sass': ['prettier'],
  \   'less': ['prettier'],
  \   'javascript': ['prettier', 'eslint'],
  \   'typescript': ['prettier', 'eslint'],
  \   'typescriptreact': ['prettier', 'eslint'],
  \   'jsx': ['prettier'],
  \   'vue': ['prettier', 'eslint'],
  \   'md': ['prettier'],
  \}
  let g:ale_eruby_prettier_options = '--parser html'

  " lint 対応
  let g:airline#extensions#ale#enabled = 1
  let g:airline#extensions#ale#open_lnum_symbol = '('
  let g:airline#extensions#ale#close_lnum_symbol = ')'

  " KeyMAP
  nmap <silent><C-k> <Plug>(ale_previous_wrap)
  nmap <silent><C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = 'FileType'
on_ft = ['tex', 'latex']
hook_source = '''
  let g:quickrun_config = {
  \   'tex': {
  \       'command': 'latexmk',
  \       'exec': ['%c -gg -pdfdvi %s', 'xdg-open %s:r.pdf']
  \   },
  \}
  let g:quickrun_no_default_key_mappings = 1
'''
#
# --------------------------------------------------
# Python
# --------------------------------------------------
[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_event = 'FileType'
on_ft = ['python']

# --------------------------------------------------
# Praat
# --------------------------------------------------
[[plugins]]
repo = 'dopefishh/vim-praat'
on_event = 'FileType'
on_ft = ['praat']

# --------------------------------------------------
# Latex
# --------------------------------------------------
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex', 'latex']
hook_source = '''
  let g:tex_flavor = 'latex'
  let g:vimtex_view_method = 'mupdf'
  if has('nvim')
    let g:vimtex_compiler_progname = 'nvr'
  endif
  call vimtex#init()
'''

# --------------------------------------------------
# HTML
# --------------------------------------------------
[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'FileType'
on_ft = ['html']
hook_source = '''
  let g:user_emmet_leader_key='<Space>e'
'''

# --------------------------------------------------
# Typescript
# --------------------------------------------------
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_event = 'FileType'
on_ft = ['typescript']
hook_source = '''
  let g:typescript_indent_disable = 1
'''

[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_event = 'FileType'
on_ft = ['javascript', 'typescript', 'html']
hook_source = '''
  let g:js_indent_typescript = 1
'''

# --------------------------------------------------
# GO LANG
# --------------------------------------------------
[[plugins]]
repo = 'mattn/vim-goimports'

[[plugins]]  # go
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  let g:go_fmt_command = "goimports"
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''
