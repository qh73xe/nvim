# ====================================================
# .config/nvim/dein_lazy.toml
# ====================================================
#
# 遅延読み込み系プラグイン管理
#

# ====================================================
# ユーティリティ
# ====================================================
[[plugins]]  # vim 操作インターフェース
depends = ['neomru.vim']
repo = 'Shougo/denite.nvim'

[[plugins]]  # Terminal
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
  nnoremap <silent> ,rc :TREPLSendFile<cr>
  nnoremap <silent> ,rl :TREPLSendLine<cr>
  vnoremap <silent> ,rl :TREPLSendSelection<cr>
  nnoremap <Space>@ :Ttoggle<CR>
  autocmd MyAutoCmd FileType python nnoremap <buffer> <Space>@ :T jupyter-console<CR>
'''

[[plugins]] # ft の動的変更
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
  let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }
  autocmd MyAutoCmd InsertEnter * :PreciousSwitch
  autocmd MyAutoCmd InsertLeave * :PreciousReset
'''

[[plugins]] # 範囲検索
repo = 'osyo-manga/vim-operator-search'
depends = ['vim-operator-user', 'vim-textobj-function', 'vim-textobj-user']
hook_add = '''
  nmap <Space>/ <Plug>(operator-search)if
'''

# ====================================================
# 開発支援
# ====================================================
[[plugins]] # スニペット管理
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
hook_add = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory=g:ECT_DIR . '/snipets/'
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> "<Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?  "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]] # シンタッスクチェッカー
repo = 'w0rp/ale'
on_event = 'FileType'
hook_add = """
  let g:ale_sign_column_always = 1
  let g:ale_open_list = 1
  let g:ale_linters = {
  \   'javascript': ['eslint'],
  \   'python': ['flake8', 'yapf', 'mypy', 'pycodestyle'],
  \   'yaml': ['yamllint'],
  \   'json': ['jq'],
  \   'sh': ['shellcheck'],
  \   'css': ['stylelint'],
  \   'html': [],
  \   'rst': ['alex', 'rstcheck', 'textlint'],
  \}
  let g:airline#extensions#ale#enabled = 1
  nmap <silent><C-k> <Plug>(ale_previous_wrap)
  nmap <silent><C-j> <Plug>(ale_next_wrap)
"""


[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = 'FileType'  # filetype が特定された時に読み込む
hook_add = '''
let g:quickrun_config = {
\   'tex': {
\       'command': 'latexmk',
\       'exec': ['%c -gg -pdfdvi %s', 'xdg-open %s:r.pdf']
\   },
\}
'''

# Python
# -------------------------------------------------------------
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['python']
hook_add = '''
   set completeopt-=preview
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python']

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python']

[[plugins]]  # rst
repo = 'Rykka/riv.vim'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['rst', 'python']

[[plugins]]  # rst
repo = 'vim-scripts/rest.vim'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['rst', 'python']

# HTML
# -------------------------------------------------------------
[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['html']
hook_add = '''
  let g:user_emmet_leader_key='<Space>e'
'''

# Praat
# -------------------------------------------------------------
[[plugins]]
repo = 'dopefishh/vim-praat'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['praat']


# Latex
# -------------------------------------------------------------
[[plugins]]
repo = 'lervag/vimtex'
on_event = 'FileType'  # filetype が特定された時に読み込む
on_ft = ['tex', 'latex']


# Typescript
# -------------------------------------------------------------
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_event = 'FileType'
on_ft = ['javascript', 'typescript']

[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_event = 'FileType'
on_ft = ['javascript', 'typescript', 'html']
hook_add = '''
    let g:js_indent_typescript = 1
'''

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_event = 'FileType'
on_ft = ['javascript', 'typescript']
hook_add = '''
    let g:used_javascript_libs = 'jquery,angularjs,angularui,angularuirouter'
'''


# ====================================================
# UI 制御
# ====================================================
[[plugins]]  # AIRLINE
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes', 'im_control.vim']
hook_add = '''
  set laststatus=2
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline#extensions#whitespace#mixed_indent_algo = 2
'''

[[plugins]] # Colour Shceme
repo = 'jacoborus/tender.vim'
depends = ['vim-airline']
hook_add = '''
  if has("termguicolors")
    set termguicolors
    set background=dark
  endif
  if has("termguicolors")
    let g:airline_theme = 'tender'
    au MyAutoCmd VimEnter * nested colorscheme tender
  else
    let g:airline_theme = 'desert'
    au MyAutoCmd VimEnter * nested colorscheme desert
  endif
'''
