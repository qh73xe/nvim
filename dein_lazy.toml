# ===========================================
# .config/nvim/dein_lazy.toml
# ===========================================
#
# nvim のプラグインの内, 非同期読み込みを行うライブラリの設定を記述します.

# ====================================================
# LanguageClient
# ====================================================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'FileType'
depends = ['nvim-web-devicons']
lua_source = '''
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, { virtual_text = false }
)
'''

[[plugins]]
repo ='williamboman/mason.nvim'
on_source = 'mason-lspconfig.nvim'
lua_source = '''
require('mason').setup({
  ui = {
    icons = {
      package_installed = "✓",
      package_pending = "➜",
      package_uninstalled = "✗"
    }
  }
})
'''

[[plugins]]
repo ='williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
depends = ['nvim-lspconfig']
lua_source = '''
  require("mason-lspconfig").setup({
    ensure_installed = {
      -- docker, docker-compose
      "dockerls",
      "docker_compose_language_service",
      -- react, vue, deno
      "eslint",
      "tsserver",
      "volar",
      "denols",
      -- python
      "pyright",
      "pylsp",
      -- utils
      "lua_ls", -- lua
      "dotls", -- dotfile
      "taplo", -- toml
      "yamlls", -- yaml
      "esbonio", -- rst
      "ltex", -- latex
    },
  })

  local nvim_lsp = require('lspconfig')
  local capabilities = require("ddc_source_lsp").make_client_capabilities()
  require("mason-lspconfig").setup_handlers({
    function(server_name)
      local opts = {
        capabilities = capabilities,
      }
      -- fileType が rst の場合 LTex を利用しない
      if server_name == "ltex" then
        if vim.bo.filetype == "rst" then
          return
        end
      end

      -- JS 関連の LSP 選択
      local node_root_dir = nvim_lsp.util.root_pattern("package.json")
      local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

      local react_root_dir = nvim_lsp.util.root_pattern("main.tsx")
      local is_react_repo = react_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

      if server_name == "volar" then
        -- package.json 配下でなければ利用しない
        if not is_node_repo then
          return
        -- main.tsx 配下では利用しない
        elseif is_react_repo then
          return
        end
        opts.filetypes = {
          'typescript',
          'javascript',
          'javascriptreact',
          'typescriptreact',
          'vue',
          'json'
        }
      -- App.vue がある場合には tsserver の処理を止める
      elseif server_name == "tsserver" then
        -- package.json 配下でなければ利用しない
       if not is_node_repo then
          return
        -- main.tsx 配下ではなければ利用しない
        elseif not is_react_repo then
          return
        end
      elseif server_name == "eslint" then
        -- package.json 配下でなければ利用しない
        if not is_node_repo then
          return
        end
      -- package.json 配下では利用しない
      elseif server_name == "denols" then
        if is_node_repo then
          return
        end
      end
      opts.on_attach = function(_, bufnr)
        local bufopts = { silent = true, buffer = bufnr }

        -- カーソル下の変数の情報の取得
        vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)

        -- 定義ジャンプ
        vim.keymap.set('n', '<C-n>', vim.lsp.buf.definition, bufopts)
        vim.keymap.set('n', '<C-N>', vim.lsp.buf.implementation, bufopts)

        -- 変数参照先の一覧を取得
        vim.keymap.set('n', '<leader>r', vim.lsp.buf.references, bufopts)

        -- Error/Warning/Hint の実行可能な修正の候補を表示
        vim.keymap.set('n', '<leader>h', vim.lsp.buf.code_action, bufopts)

        -- フォーマットの実施
        vim.keymap.set('n', '<leader><Enter>', vim.lsp.buf.format, bufopts)

      end
      nvim_lsp[server_name].setup(opts)
    end
  })
'''

[[plugins]] # 型情報ヘルプ
repo = 'matsui54/denops-signature_help'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
let g:signature_help_config = {
\ contentsStyle: "full",
\ viewStyle: "floating"
\ }
call signature_help#enable()
'''

# ===================================================
# 開発支援
# ===================================================
[[plugins]] # シンタッスクチェッカー
repo ='folke/trouble.nvim'
on_source = 'nvim-lspconfig'
depends = ['nvim-web-devicons']
lua_source = '''
  require("trouble").setup {
    position = "bottom", -- position of the list can be: bottom, top, left, right
    use_diagnostic_signs = true,
  }
  vim.keymap.set("n", "Q", function() require("trouble").open() end)
'''

[[plugins]] # コードフォーマッター
repo = 'mhartington/formatter.nvim'
on_event = 'FileType'
lua_source = '''
require("formatter").setup {
  -- ロギングを有効または無効にする
  logging = false,
  filetype = {
    lua = {
      require("formatter.filetypes.lua").stylua
    },
    javascript = {
      require("formatter.filetypes.javascript").prettier
    },
    typescript = {
      require("formatter.filetypes.typescript").prettier,
    },
    typescriptreact = {
      require("formatter.filetypes.typescriptreact").prettier
    },
    vue = {
      require("formatter.filetypes.vue").prettier
    },
    css = {
      require("formatter.filetypes.css").prettier
    },
    python = {
      require("formatter.filetypes.python").yapf,
      require("formatter.filetypes.python").isort
    },
    json = {
      require("formatter.filetypes.json").prettier
    },
    -- デフォルトフォーマッタ構成
    ["*"] = {
      require("formatter.filetypes.any").remove_trailing_whitespace
    }
  }
}
'''

[[plugins]] # LSP 用スニペット補完
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  let g:vsnip_filetypes = {}
'''

[[plugins]] # スニペット補完
repo = 'Shougo/neosnippet'
on_event = 'VimEnter'
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory=g:ECT_DIR . '/snipets/'
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]] # copilot
repo = 'github/copilot.vim'
on_event = 'FileType'  # filetype が特定された時に読み込む


# ====================================================
# git
# ====================================================
[[plugins]] # git 支援
repo = 'lewis6991/gitsigns.nvim'
on_event = 'VimEnter'
lua_source = '''
require('gitsigns').setup {
  signs = {
    add          = { text = '➕' },
    change       = { text = '✨' },
    delete       = { text = '➖' },
    topdelete    = { text = '‾' },
    changedelete = { text = '🔥' },
    untracked    = { text = '┆' },
  },
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = true, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  watch_gitdir = {
    follow_files = true
  },
  attach_to_untracked = true,
  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
    delay = 1000,
    ignore_whitespace = false,
  },
  current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
  sign_priority = 6,
  update_debounce = 100,
  status_formatter = nil, -- Use default
  max_file_length = 40000, -- Disable if file is longer than this (in lines)
  preview_config = {
    -- Options passed to nvim_open_win
    border = 'single',
    style = 'minimal',
    relative = 'cursor',
    row = 0,
    col = 1
  },
  yadm = {
    enable = false
  },
  on_attach = function(bufnr)
    local gs = package.loaded.gitsigns
    local bufopts = { silent = true, buffer = bufnr }
    -- カーソル下の変数の情報の取得
    vim.keymap.set('n', '<leader>hb', function() gs.blame_line{full=false} end, bufopts)
  end
}
'''
