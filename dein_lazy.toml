# ===========================================
# .config/nvim/dein_lazy.toml
# ===========================================
#
# nvim のプラグインの内, 非同期読み込みを行うライブラリの設定を記述します.

# ====================================================
# LanguageClient
# ====================================================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'FileType'
depends = ['nvim-web-devicons']
lua_source = '''
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, { virtual_text = false }
)
'''

[[plugins]]
repo ='williamboman/mason.nvim'
on_source = 'mason-lspconfig.nvim'
lua_source = '''
require('mason').setup({
  ui = {
    icons = {
      package_installed = "✓",
      package_pending = "➜",
      package_uninstalled = "✗"
    }
  }
})
'''

[[plugins]]
repo ='williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
depends = ['nvim-lspconfig']
lua_source = '''
  local nvim_lsp = require('lspconfig')
  require("mason-lspconfig").setup({
    ensure_installed = {
      "dockerls",
      "docker_compose_language_service",
      "dotls",
      "lua_ls",
      "marksman",
      "taplo", -- toml
      "yamlls",
      -- react, vue
      "eslint",
      "tsserver",
      "volar",
      -- "denols",
      "ltex", -- latex
      -- R, Matlab, python
      "jedi_language_server",
      "wgsl_analyzer",
      "matlab_ls",
    },
  })
  require("mason-lspconfig").setup_handlers({
    function(server_name)
      local opts = {}

      if server_name == "tsserver" then
        local root_dir = nvim_lsp.util.root_pattern("App.vue")
        local is_vue_repo = root_dir(vim.api.nvim_buf_get_name(0)) ~= nil
        if not vue_pattern then
          return
        end
      end
      -- volar を読み込む際には tsserver 系統も全て利用する
      if server_name == "volar" then
          opts.filetypes = {
            'typescript',
            'javascript',
            'javascriptreact',
            'typescriptreact',
            'vue',
            'json'
          }
      end

      opts.on_attach = function(_, bufnr)
        local bufopts = { silent = true, buffer = bufnr }

        -- カーソル下の変数の情報の取得
        vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)

        -- 定義ジャンプ
        vim.keymap.set('n', '<C-n>', vim.lsp.buf.definition, bufopts)
        vim.keymap.set('n', '<C-N>', vim.lsp.buf.implementation, bufopts)

        -- 変数参照先の一覧を取得
        vim.keymap.set('n', '<leader>r', vim.lsp.buf.references, bufopts)

        -- Error/Warning/Hint の実行可能な修正の候補を表示
        vim.keymap.set('n', '<leader>h', vim.lsp.buf.code_action, bufopts)

        -- フォーマットの実施
        vim.keymap.set('n', '<leader><Enter>', vim.lsp.buf.format, bufopts)

      end
      nvim_lsp[server_name].setup(opts)
    end
  })
'''


# ====================================================
# 編集支援
# ====================================================
[[plugins]] # コード補完
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('sources', [
\     'around',
\     'nvim-lsp',
\     'neosnippet',
\     'vsnip',
\     'file'
\ ])
call ddc#custom#patch_global('sourceOptions', {
\   '_': {
\     'matchers': ['matcher_head'],
\     'sorters': ['sorter_rank'],
\     'converters': ['converter_remove_overlap'],
\   },
\   'file': {
\     'mark': 'F',
\     'isVolatile': v:true,
\     'forceCompletionPattern': '\S/\S*',
\   },
\   'around': {'mark': 'A'},
\   'neosnippet': {'mark': 'S'},
\   'nvim-lsp': {
\     'mark': 'L',
\     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
\   },
\ })
call ddc#custom#patch_global('sourceParams', {
\     'around': {'maxSize': 500},
\ })
call ddc#enable()
'''

[[plugins]] # 補完用ポップアップ
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'
hook_source = '''
" ddc と pum を接続させる
call ddc#custom#patch_global('ui', 'pum.vim')

inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>  " 補完候補を一つ進める
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>  " 補完候補を一つ戻す
" 補完候補を一つ戻す
inoremap <silent><expr> <TAB>
  \ pumvisible() ? '<C-n>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()
inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]] # 周辺単語補完ソース
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]] # ラングエッジサーバー補完ソース
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]] # ddc 用スニペット補完ソース
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'

[[plugins]] # LSP 用スニペット補完
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
'''

[[plugins]] # ファイルパス補完
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]] # copilot
repo = 'github/copilot.vim'
on_event = 'FileType'  # filetype が特定された時に読み込む


# ===================================================
# UI 制御
# ===================================================
[[plugins]]  # vim interface framework
depends = ['denops.vim']
repo = 'Shougo/ddu.vim'

[[plugins]]  # Indent 表示
repo = 'nathanaelkane/vim-indent-guides'
on_event = 'FileType'  # filetype が特定された時に読み込む
hook_source = '''
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
'''
hook_post_source = '''
  :hi IndentGuidesOdd  guibg=DarkGrey ctermbg=DarkGrey
  :hi IndentGuidesEven guibg=#73cef4 ctermbg=81
'''

[[plugins]] # 全角強調
repo = 'thinca/vim-zenspace'
on_event = 'FileType'
hook_source = '''
  set list
'''

[[plugins]]  # AIRLINE
repo = 'vim-airline/vim-airline'
on_event = 'VimEnter'
depends = ['vim-airline-themes']
hook_source = '''
  set laststatus=2
  let g:airline_powerline_fonts = 1

  " tab 設定
  let g:airline_theme = 'nord_minimal'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
  nmap <C-p> <Plug>AirlineSelectPrevTab
  nmap <C-n> <Plug>AirlineSelectNextTab

'''

# ===================================================
# 開発支援
# ===================================================
[[plugins]] # lua によるカラー支援
repo ='folke/lsp-colors.nvim'
on_event = 'BufEnter'
lua_source = '''
require("lsp-colors").setup({
  Error = "#db4b4b",
  Warning = "#e0af68",
  Information = "#0db9d7",
  Hint = "#10B981"
})
'''

[[plugins]] # シンタッスクチェッカー
repo ='folke/trouble.nvim'
on_source = 'nvim-lspconfig'
depends = ['nvim-web-devicons']
lua_source = '''
  require("trouble").setup {
    use_diagnostic_signs = true
  }
  vim.keymap.set("n", "Q", function() require("trouble").open() end)
'''

[[plugins]] # コードフォーマッター
repo = 'mhartington/formatter.nvim'
on_event = 'FileType'
lua_source = '''
local util = require "formatter.util"
require("formatter").setup {
  -- ロギングを有効または無効にする
  logging = false,
  filetype = {
    lua = {
      require("formatter.filetypes.lua").stylua
    },
    javascript = {
      require("formatter.filetypes.javascript").prettier
    },
    typescript = {
      require("formatter.filetypes.typescript").prettier
    },
    vue = {
      require("formatter.filetypes.vue").prettier
    },
    css = {
      require("formatter.filetypes.css").prettier
    },
    -- デフォルトフォーマッタ構成
    ["*"] = {
      require("formatter.filetypes.any").remove_trailing_whitespace
    }
  }
}
'''

[[plugins]] # スニペット補完
repo = 'Shougo/neosnippet'
on_event = 'VimEnter'
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory=g:ECT_DIR . '/snipets/'
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]] # 構文解析
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'FileType'
hook_post_update = 'TSUpdate'
lua_source = '''
  require('nvim-treesitter.configs').setup {
    ensure_installed = { 
      "bash",
      "csv",
      "tsv",
      "xml",
      "diff",
      "dot",
      "ini",
      "toml",
      "jq",
      "make",
      "dockerfile",
      -- vim
      "vim",
      "lua",
      -- git
      "git_config",
      "git_rebase",
      "gitattributes",
      "gitcommit",
      "gitignore",
      "markdown",
      -- python
      "python",
      "htmldjango",
      "po",
      "sql",
      "rst",
      "wgsl",
      -- react, vue
      "vue",
      "javascript",
      "html",
      "typescript",
      "tsx",
      "css",
      "scss",
      "jsdoc",
      "robot",
      -- tex
      "bibtex",
      "latex",
      -- matlab
      "matlab",
      "r",
    },
    sync_install = false,
    auto_install = true,
    highlight = {
      enable = true,
    },
  }
'''

# --------------------------------------------------
# Python
# --------------------------------------------------
[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_event = 'FileType'
on_ft = ['python']

# --------------------------------------------------
# Praat
# --------------------------------------------------
[[plugins]]
repo = 'dopefishh/vim-praat'
on_event = 'FileType'
on_ft = ['praat']

# --------------------------------------------------
# Latex
# --------------------------------------------------
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex', 'latex']
hook_source = '''
  let g:tex_flavor = 'latex'
  let g:vimtex_view_method = 'mupdf'
  if has('nvim')
    let g:vimtex_compiler_progname = 'nvr'
  endif
  call vimtex#init()
'''

# --------------------------------------------------
# Typescript
# --------------------------------------------------
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_event = 'FileType'
on_ft = ['typescript']
hook_source = '''
  let g:typescript_indent_disable = 1
'''

[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_event = 'FileType'
on_ft = ['javascript', 'typescript', 'html']
hook_source = '''
  let g:js_indent_typescript = 1
'''
